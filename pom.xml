<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.motiveko</groupId>
	<artifactId>testmaven</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>testmaven</name>
	<url>http://maven.apache.org</url>

	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>

		<!-- Tomcat Embedded -->
		<tomcat.version>8.5.23</tomcat.version>
	</properties>

	<dependencies>
		<!-- spring-core 말고 spring-context를 주입해야 IOC등을 사용할 수 있다. org.springframework.context -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.1.9.RELEASE</version>
		</dependency>
		<!-- spring-jdbc 4.3.3 이후로는 spring-tx가 포함되어서 나온다. -->
		<!-- <dependency> <groupId>org.springframework</groupId> <artifactId>spring-tx</artifactId> 
			<version>5.1.9.RELEASE</version> </dependency> -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>5.1.9.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.12</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.2.3</version>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>2.0.206</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>4.0.1</version>
		</dependency>

		<!-- Test를 위한 JUnit dependency 설정 -->
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-launcher</artifactId>
			<version>1.6.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.6.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.vintage</groupId>
			<artifactId>junit-vintage-engine</artifactId>
			<version>5.6.2</version>
			<scope>test</scope>
		</dependency>

		<!-- 자바에서 @ComponentScan 으로 class들을 scan할 때 불필요한 불필요한 class는 스캔하지 않도록 해주는 
			것 -->
		<!-- 처음에 스캔할 때 @Component 붙은 요소를 다 읽어서 META-INF에 spring.components 파일로 
			key-value로 저장함, 다시사용시 이를 계속 읽어서 불필요한 스캔을 없앰 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-indexer</artifactId>
			<version>5.1.8.RELEASE</version>
			<optional>true</optional>
		</dependency>

		<!-- validation, jsr303 -->
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>2.0.1.Final</version>
		</dependency>

		<!-- 이거를 추가해줘야 validatorfactoryBean에서 오류가 안난다. https://lemontia.tistory.com/925 
			를 참조했다.. 추가안하면 javax.el.~가 없다고 자꾸나온다. -->
		<dependency>
			<groupId>org.glassfish</groupId>
			<artifactId>javax.el</artifactId>
			<version>3.0.0</version>
		</dependency>

		<!-- Bean Validaton provier, localValidatorFactoryBean사용하기 위해서 필요하다 , 이 
			안에 validation-api가 들어있으므로 위의 중복된 의존성은 지운다. -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>6.0.15.Final</version>
		</dependency>
		<!-- Using JSR 330 Standard Annotations -->
		<!-- javax.servlet처럼 이것도 spec이고 interface이다. 기존 spring annotation을 jsr330형식으로 
			으로 쓴다.(ex. autowirde->inject ..) 별루안중요 -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>

		<!-- aspectJ, Schema-based AOP를 위한 dependencies -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>1.9.4</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.9.4</version>
		</dependency>

		<!-- JavaSE의 DataSource Interface의 구현체 중 하나, HikariCP -->
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
			<version>3.4.5</version>
		</dependency>


		<!-- Tomcat Embedded -->
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-core</artifactId>
			<version>${tomcat.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<version>${tomcat.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.tomcat</groupId>
			<artifactId>tomcat-jasper</artifactId>
			<version>${tomcat.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat</groupId>
			<artifactId>tomcat-jasper-el</artifactId>
			<version>${tomcat.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat</groupId>
			<artifactId>tomcat-jsp-api </artifactId>
			<version>${tomcat.version}</version>
		</dependency>

		<!-- spring web servlet 관련 dependency -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>5.2.7.RELEASE</version>
		</dependency>


		<!-- view resolver를 위한 thymeleaf -->
		<dependency>
			<groupId>org.thymeleaf</groupId>
			<artifactId>thymeleaf-spring5</artifactId>
			<version>3.0.11.RELEASE</version>
		</dependency>

		<!-- spring security -->
		<dependency>
		  <groupId>org.springframework.security</groupId>
		  <artifactId>spring-security-web</artifactId>
		  <version>5.1.6.RELEASE</version>
		</dependency>
		<dependency>
		  <groupId>org.springframework.security</groupId>
		  <artifactId>spring-security-config</artifactId>
		  <version>5.1.6.RELEASE</version>
		</dependency>

	</dependencies>
	<build>

		<!-- maven shade plugin : 패키징 하는 플러그인 -->
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>3.2.1</version>
				<configuration>
					<!-- put your configurations here -->
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>

						<configuration>
							<transformers>
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>com.motiveko.testmaven.cli.web</mainClass>
								</transformer>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Test를 위한 JUnit plugin -->
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.2</version>
			</plugin>
			<plugin>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.22.2</version>
			</plugin>

		</plugins>
	</build>


</project>
